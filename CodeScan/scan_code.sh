#!/bin/bash

# Get the directory path of the script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"

# Prompt for the directory containing your source code files
read -p "Enter the directory path of your source code files: " SOURCE_DIR

# Ensure the specified directory exists
if [ ! -d "$SOURCE_DIR" ]; then
    echo "Directory does not exist."
    exit 1
fi

# Remove trailing slash from directory path if present
SOURCE_DIR=${SOURCE_DIR%/}

# Create the results folder if it doesn't exist
RESULTS_FOLDER="$SCRIPT_DIR/results"
mkdir -p "$RESULTS_FOLDER"

# Output file to save results
OUTPUT_FILE="${RESULTS_FOLDER}/vulnerability_results.txt"

# Remove the previous output file, if exists
rm -f "$OUTPUT_FILE"

# List of patterns to search for (add more as needed)
PATTERNS="eval(|exec(|system(|shell_exec(|passthru(|assert(|popen(|pcntl_exec(|proc_open(|dl(|include(|require(|require_once(|mysql_query(|mysqli_query(|pdo->query(|mysqli_prepare(|exec(|os.system(|subprocess.call(|pickle.load(|xml.etree.ElementTree(|pickle.loads(|XMLHttpRequest(|sqlite_query(|open(|java.lang.Runtime.getRuntime().exec(|new Function(|localStorage.setItem(|document.write(|window.open("

# Grep options
GREP_OPTIONS="-lro --include=\*.{php,py,js,java}"

echo "Scanning for vulnerabilities..."

# Scan source files for patterns
grep -E $GREP_OPTIONS "$PATTERNS" "$SOURCE_DIR" | while read -r line; do
    echo "Potential vulnerability found in $line" >> "$OUTPUT_FILE"
    ANY_VULNERABLE=true
done

# Output the summary
if [ "$ANY_VULNERABLE" = true ]; then
    echo "Potential vulnerabilities detected. Detailed results saved to $OUTPUT_FILE"
else
    echo "No vulnerabilities detected." >> "$OUTPUT_FILE"
    echo "No vulnerabilities detected."
fi
